{"version":3,"sources":["components/CommandBar.tsx","img/blankBox.svg","img/checkedBox.svg","components/ListDisplay.tsx","components/ListForm.tsx","App.tsx","index.tsx"],"names":["CommandBar","clearAllHandler","resetAllHandler","className","onClick","document","querySelector","style","display","ListDisplay","renderedLists","lists","toggleHandler","indivClearHandler","indivDeleteHandler","indivResetHandler","addToListHandler","length","map","Name","Type","Items","compNumb","filter","item","Completed","totNumb","renderedItems","Task","src","checked","alt","blank","action","type","onSubmit","ListForm","newHandler","htmlFor","id","name","App","useEffect","localData","JSON","parse","localStorage","getItem","setLists","useState","Fragment","e","proxyList","preventDefault","console","log","newList","check","formData","target","form","List","value","push","setItem","stringify","i","delList","task","j","tagName","titleTerm","parentElement","firstChild","innerHTML","titleIndex","findIndex","list","taskTerm","taskIndex","previousSibling","newArr","splice","listTerm","listIndex","inputElem","inputText","window","alert","newItem","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e1e31c2.chunk.js","sourcesContent":["/* Library Imports */\n//React\nimport React from \"react\";\n\n/* Stylesheet Imports */\nimport \"../styles/CommandBar.scss\";\n\n/* Image Imports */\n\n/* Component Imports */\n\n/* Component Interfaces */\ntype Props = {\n  clearAllHandler: () => void;\n  resetAllHandler: () => void;\n};\n\n/* Component/Functions */\nconst CommandBar: React.FC<Props> = ({ clearAllHandler, resetAllHandler }) => {\n  //Logic to show list form\n  const showForm = () => {\n    let targ = document.querySelector(\".ListForm\") as HTMLElement;\n    targ.style.display = \"flex\";\n  };\n\n  //Function return statement\n  return (\n    <div className=\"CommandBar\">\n      <div className=\"commandsCont\">\n        <button className=\"commandButton btn btn-primary\" onClick={showForm}>\n          Add List\n        </button>\n        <button\n          className=\"commandButton btn btn-yellow\"\n          onClick={clearAllHandler}\n        >\n          Clear Finished Tasks\n        </button>\n        <button className=\"commandButton btn\" onClick={resetAllHandler}>\n          Reset Checklists\n        </button>\n      </div>\n    </div>\n  );\n};\n\n/* Export Statement */\nexport default CommandBar;\n","export default __webpack_public_path__ + \"static/media/blankBox.e5a9d6f8.svg\";","export default __webpack_public_path__ + \"static/media/checkedBox.bdf36f78.svg\";","/* Library Imports */\n//React\nimport React from \"react\";\n\n/* Stylesheet Imports */\nimport \"../styles/ListDisplay.scss\";\n\n/* Image Imports */\nimport blank from \"../img/blankBox.svg\";\nimport checked from \"../img/checkedBox.svg\";\n\n/* Component Imports */\n\n/*Component Interfaces */\ntype Props = {\n  lists: any[];\n  toggleHandler: (e: React.MouseEvent) => void;\n  indivClearHandler: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  indivDeleteHandler: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  indivResetHandler: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  addToListHandler: (e: any) => void;\n};\n\n/* Component/Functions */\nconst ListDisplay: React.FC<Props> = ({\n  lists,\n  toggleHandler,\n  indivClearHandler,\n  indivDeleteHandler,\n  indivResetHandler,\n  addToListHandler,\n}) => {\n  /* Logic for Rendering Lists */\n  let renderedLists;\n  if (lists.length) {\n    renderedLists = lists.map(\n      ({ Name, Type, Items }: { Name: string; Type: string; Items: any[] }) => {\n        const compNumb = Items.filter((item) => item.Completed === true).length;\n        const totNumb = Items.length;\n        const renderedItems = Items.map(\n          ({ Task, Completed }: { Task: string; Completed: boolean }) => {\n            if (Completed) {\n              return (\n                <div\n                  key={`${Name}${Task}`}\n                  className=\"listItem\"\n                  onClick={toggleHandler}\n                >\n                  <p className=\"itemText\">{Task}</p>\n                  <img src={checked} alt=\"\" className=\"itemimg\" />\n                </div>\n              );\n            } else {\n              return (\n                <div\n                  key={`${Name}${Task}`}\n                  className=\"listItem\"\n                  onClick={toggleHandler}\n                >\n                  <p className=\"itemText\">{Task}</p>\n                  <img src={blank} alt=\"\" className=\"itemimg\" />\n                </div>\n              );\n            }\n          }\n        );\n        if (Type === \"Check\") {\n          return (\n            <div key={`checklist${Name}`} className=\"list check card\">\n              <div className=\"wrapper\">\n                <div className=\"titleInfo\">\n                  <h5 className=\"listTitle\">{Name}</h5>\n                  <p className=\"listProg\">{`${compNumb}/${totNumb}`}</p>\n                </div>\n                <div className=\"itemList\">{renderedItems}</div>\n                <div className=\"listInputCont\">\n                  <form action=\"\">\n                    <input\n                      type=\"text\"\n                      className=\"listInput\"\n                      onSubmit={addToListHandler}\n                    />\n                    <button\n                      className=\"listConfirmButton\"\n                      onClick={addToListHandler}\n                    >\n                      Add\n                    </button>\n                  </form>\n                </div>\n                <div className=\"bottomListBlock\">\n                  <p className=\"identifier\">Checklist</p>\n                  <div className=\"listActions\">\n                    <button\n                      className=\"listAction btn btn-error\"\n                      onClick={indivDeleteHandler}\n                    >\n                      Delete List\n                    </button>\n                    <button\n                      className=\"listAction btn\"\n                      onClick={indivResetHandler}\n                    >\n                      Reset List\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        } else {\n          return (\n            <div key={`todolist${Name}`} className=\"list todo card\">\n              <div className=\"wrapper\">\n                <div className=\"titleInfo\">\n                  <h5 className=\"listTitle\">{Name}</h5>\n                  <p className=\"listProg\">{`${compNumb}/${totNumb}`}</p>\n                </div>\n                <div className=\"itemList\">{renderedItems}</div>\n                <div className=\"listInputCont\">\n                  <form className=\"listForm\" action=\"\">\n                    <input\n                      type=\"text\"\n                      className=\"listInput\"\n                      onSubmit={addToListHandler}\n                    />\n                    <button\n                      className=\"listConfirmButton\"\n                      onClick={addToListHandler}\n                    >\n                      Add\n                    </button>\n                  </form>\n                </div>\n                <div className=\"bottomListBlock\">\n                  <p className=\"identifier\">To-Do List</p>\n                  <div className=\"listActions\">\n                    <button\n                      className=\"listAction btn btn-error\"\n                      onClick={indivDeleteHandler}\n                    >\n                      Delete List\n                    </button>\n                    <button\n                      className=\"listAction btn\"\n                      onClick={indivResetHandler}\n                    >\n                      Reset List\n                    </button>\n                    <button\n                      className=\"listAction btn btn-yellow\"\n                      onClick={indivClearHandler}\n                    >\n                      Clear Finished\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        }\n      }\n    );\n  } else {\n    return (\n      <div className=\"ListDisplay\">\n        <h2>Please create a list!</h2>\n      </div>\n    );\n  }\n\n  //Function Return Statement\n  return <div className=\"ListDisplay\">{renderedLists}</div>;\n};\n\n/* Export Statement */\nexport default ListDisplay;\n","/* Library Imports */\n//React\nimport React from \"react\";\n\n/* Stylesheet Imports */\nimport \"../styles/ListForm.scss\";\n\n/* Image Imports */\n\n/* Component Imports */\n\n/*Component Interfaces */\ntype Props = {\n  newHandler: (e: any) => void;\n};\n\n/* Component/Functions */\nconst ListForm: React.FC<Props> = ({ newHandler }) => {\n  //Logic to hide the form\n  const hideForm = () => {\n    let targ = document.querySelector(\".ListForm\") as HTMLElement;\n    targ.style.display = \"none\";\n  };\n\n  //Function Return Statement\n  return (\n    <div className=\"ListForm card\">\n      <form action=\"\">\n        <h2>Add New List</h2>\n\n        <label htmlFor=\"listName\">List Name</label>\n        <input type=\"text\" id=\"listName\" />\n        <div className=\"listOptions\">\n          <div className=\"option\">\n            <label htmlFor=\"check\">Checklist</label>\n            <input type=\"radio\" name=\"listType\" id=\"check\" />\n          </div>\n          <div className=\"option\">\n            <label htmlFor=\"todo\">To Do List</label>\n            <input type=\"radio\" name=\"listType\" id=\"todo\" />\n          </div>\n        </div>\n        <button className=\"addButton btn btn-success\" onClick={newHandler}>\n          Add List\n        </button>\n      </form>\n      <button className=\"closeOut\" onClick={hideForm}>\n        DONE\n      </button>\n    </div>\n  );\n};\n\n/* Export Statement */\nexport default ListForm;\n","/* Library Imports */\n//React\nimport React, { useEffect, useState } from \"react\";\n\n/* Stylesheet Imports */\nimport \"./styles/App.scss\";\n\n/* Image Imports */\n\n/* Component Imports */\nimport CommandBar from \"./components/CommandBar\";\nimport ListDisplay from \"./components/ListDisplay\";\nimport ListForm from \"./components/ListForm\";\n\n/* Component/Functions */\nconst App = () => {\n  /* Logic for loading from Local Storage */\n  useEffect(() => {\n    let localData = JSON.parse(localStorage.getItem(\"lists\") || \"false\");\n    if (localData === \"false\") {\n      setLists([]);\n    } else {\n      setLists(localData);\n    }\n  }, []);\n\n  //Array/State to store lists\n  const [lists, setLists] = useState([] as any[]);\n\n  /* Logic for adding a new list */\n  const newHandler = (e: any): void => {\n    e.preventDefault();\n    let proxyList: any[];\n    if (lists.length) {\n      proxyList = [...lists];\n      console.log(proxyList);\n    } else {\n      proxyList = [];\n      console.log(proxyList);\n    }\n\n    const formData = e.target.form;\n    let newList;\n    let check;\n    if (formData[1].checked === true) {\n      check = true;\n    } else {\n      check = false;\n    }\n\n    let List = (Name: string, Type: string, Items: any[]) => {\n      return { Name: Name, Type: Type, Items: [] };\n    };\n\n    if (check) {\n      newList = List(formData[0].value, \"Check\", []);\n    } else {\n      newList = List(formData[0].value, \"Todo\", []);\n    }\n\n    proxyList.push(newList);\n    setLists(proxyList);\n    localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n  };\n\n  /* Logic for toggling task completion */\n  const toggleHandler = (e: React.MouseEvent): void => {\n    const proxyList = [...lists];\n    const target = e.target as HTMLElement;\n    if (target.tagName === \"DIV\") {\n      const titleElem = target.parentElement?.parentElement?.firstChild\n        ?.firstChild as HTMLElement;\n      const titleTerm = titleElem.innerHTML;\n      const titleIndex = proxyList.findIndex((list) => {\n        return list.Name === titleTerm;\n      });\n      const taskElem = target.firstChild as HTMLElement;\n      const taskTerm = taskElem.innerHTML;\n      const taskIndex = proxyList[titleIndex].Items.findIndex((task: any) => {\n        return task.Task === taskTerm;\n      });\n      if (proxyList[titleIndex].Items[taskIndex].Completed === false) {\n        proxyList[titleIndex].Items[taskIndex].Completed = true;\n        setLists(proxyList);\n        localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n      } else {\n        proxyList[titleIndex].Items[taskIndex].Completed = false;\n        setLists(proxyList);\n        localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n      }\n    } else {\n      const titleElem = target.parentElement?.parentElement?.parentElement\n        ?.firstChild?.firstChild as HTMLElement;\n      const titleTerm = titleElem.innerHTML;\n      const titleIndex = lists.findIndex((list: any) => {\n        return list.Name === titleTerm;\n      });\n\n      if (target.tagName === \"IMG\") {\n        const curTarg = target.previousSibling as HTMLElement;\n        const taskTerm = curTarg.innerHTML;\n        const taskIndex = proxyList[titleIndex].Items.findIndex((task: any) => {\n          return task.Task === taskTerm;\n        });\n        if (proxyList[titleIndex].Items[taskIndex].Completed === false) {\n          proxyList[titleIndex].Items[taskIndex].Completed = true;\n          setLists(proxyList);\n          localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n        } else {\n          proxyList[titleIndex].Items[taskIndex].Completed = false;\n          setLists(proxyList);\n          localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n        }\n      } else {\n        const taskTerm = target.innerHTML;\n        const taskIndex = proxyList[titleIndex].Items.findIndex((task: any) => {\n          return task.Task === taskTerm;\n        });\n        if (proxyList[titleIndex].Items[taskIndex].Completed === false) {\n          proxyList[titleIndex].Items[taskIndex].Completed = true;\n          setLists(proxyList);\n          localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n        } else {\n          proxyList[titleIndex].Items[taskIndex].Completed = false;\n          setLists(proxyList);\n          localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n        }\n      }\n    }\n  };\n\n  /* Logic for resetting individual checklists */\n  const indivResetHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const proxyList = [...lists];\n    const target = e.target as HTMLElement;\n    const titleElem = target.parentElement?.parentElement?.parentElement\n      ?.firstChild?.firstChild as HTMLElement;\n    const titleTerm = titleElem.innerHTML;\n    const titleIndex = proxyList.findIndex((list) => {\n      return list.Name === titleTerm;\n    });\n\n    for (let i: number = 0; i < proxyList[titleIndex].Items.length; i++) {\n      proxyList[titleIndex].Items[i].Completed = false;\n    }\n    setLists(proxyList);\n    localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n  };\n\n  /* Logic for adding items to a list */\n  const addToListHandler = (e: any) => {\n    e.preventDefault();\n    const proxyList = [...lists];\n    const target = e.target as HTMLElement;\n    const listElem = target.parentElement?.parentElement?.parentElement\n      ?.firstChild?.firstChild as HTMLElement;\n    const listTerm = listElem.innerHTML;\n    const listIndex = proxyList.findIndex((list) => list.Name === listTerm);\n    const inputElem = target.previousSibling as HTMLInputElement;\n    let inputText = inputElem.value;\n    if (inputText === \"\") {\n      return window.alert(\"Please input a task.\");\n    }\n    let Item = (Task: string, Completed: boolean) => {\n      return { Task: Task, Completed: Completed };\n    };\n    let newItem = Item(inputText, false);\n    proxyList[listIndex].Items.push(newItem);\n    setLists(proxyList);\n    localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n    inputElem.value = \"\";\n  };\n\n  /* Logic for clearing completed tasks from an individual list */\n  const indivClearHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const proxyList = [...lists];\n    const target = e.target as HTMLElement;\n    const titleElem = target.parentElement?.parentElement?.parentElement\n      ?.firstChild?.firstChild as HTMLElement;\n    const titleTerm = titleElem.innerHTML;\n    const titleIndex = proxyList.findIndex((list) => {\n      return list.Name === titleTerm;\n    });\n    const newArr = proxyList[titleIndex].Items.filter((task: any) => {\n      return task.Completed === false;\n    });\n    proxyList[titleIndex].Items = newArr;\n    setLists(proxyList);\n    localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n  };\n\n  /* Logic for deleting an individual list */\n  const indivDeleteHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const proxyList = [...lists];\n    const target = e.target as HTMLElement;\n    const titleElem = target.parentElement?.parentElement?.parentElement\n      ?.firstChild?.firstChild as HTMLElement;\n    const titleTerm = titleElem.innerHTML;\n    const titleIndex = proxyList.findIndex((list) => {\n      return list.Name === titleTerm;\n    });\n    if (target.innerHTML === \"Delete List\") {\n      console.log(\"Step 1\");\n      target.innerHTML = \"Confirm?\";\n    } else {\n      console.log(\"del\");\n      proxyList.splice(titleIndex, 1);\n      setLists(proxyList);\n      localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n    }\n  };\n\n  //Logic to clear all completed tasks from all checklists\n  const clearAllHandler = () => {\n    const proxyList = [...lists];\n    for (let i: number = 0; i < proxyList.length; i++) {\n      if (proxyList[i].Type === \"Todo\") {\n        const delList = proxyList[i].Items.filter(\n          (task: any) => task.Completed === false\n        );\n        proxyList[i].Items = delList;\n      }\n    }\n    setLists(proxyList);\n    localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n  };\n\n  //Logic to reset all checklists\n  const resetAllHandler = () => {\n    const proxyList = [...lists];\n    for (let i: number = 0; i < proxyList.length; i++) {\n      if (proxyList[i].Type === \"Check\") {\n        for (let j: number = 0; j < proxyList[i].Items.length; j++) {\n          proxyList[i].Items[j].Completed = false;\n        }\n      }\n    }\n    setLists(proxyList);\n    localStorage.setItem(\"lists\", JSON.stringify(proxyList));\n  };\n\n  //Function Return Statement\n  return (\n    <div className=\"App\">\n      <React.Fragment>\n        <ListForm newHandler={newHandler} />\n        <CommandBar\n          clearAllHandler={clearAllHandler}\n          resetAllHandler={resetAllHandler}\n        />\n        <ListDisplay\n          lists={lists}\n          toggleHandler={toggleHandler}\n          indivClearHandler={indivClearHandler}\n          indivDeleteHandler={indivDeleteHandler}\n          indivResetHandler={indivResetHandler}\n          addToListHandler={addToListHandler}\n        />\n      </React.Fragment>\n    </div>\n  );\n};\n\n/* Export Statement */\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}